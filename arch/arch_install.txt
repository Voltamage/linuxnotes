PRE-INSTALLATION
download arch iso from here, use the magnet link and torrent if you can
    https://www.archlinux.org/download/
    
VERIFY SIGNATURE
verify your file with these commands, replace filename with current arch version
make the checksum files by copy pasting the checksum and then a space and then the filename
everything is in the same folder, and you should cd into it
you can double check the pgp output with the pgp key of the developer at https://www.archlinux.org/people/developers/
    gpg --keyserver-options auto-key-retrieve --verify archlinux-201X.0X.01-x86_64.iso.sig
    md5sum -c archlinux-201X.0X.01-x86_64.iso.md5
    sha1sum -c archlinux-201X.0X.01-x86_64.iso.sha1
    
WRITE INSTALLATION MEDIA
burn usb with etcher, as it seems to handle uefi successfully

BOOT THE LIVE ENVIRONMENT
boot into uefi mode, making sure to select the UEFI mount option in your BIOS
    
VERIFY THE BOOT MODE
list efi files
    ls /sys/firmware/efi/efivars
    
CONNECT TO THE INTERNET
find the right device, auto setup, and test internet
    ip link
    dhcpcd
    ping www.archlinux.org -c 3
    
UPDATE THE SYSTEM CLOCK
sync to UTC and double check
    timedatectl set-ntp true
    timedatectl status
    
PARTITION THE DISKS
list drives and partitions
    lsblk
    
destroy tables
    gdisk /dev/sdX
    x
    z

partition with cfdisk
    cfdisk /dev/sdX
select gpt table
new partition, 512M size, EFI System
new partition, 20G size, Linux swap
new partition, 30G size, Linux filesystem
new partition, inf size, Linux filesystem

check alignment
    parted -a optimal /dev/sdX
    align-check opt 1
    align-check opt 2
    align-check opt 3
    align-check opt 4

FORMAT THE PARTITIONS
check disks and format partitions
    lsblk
    mkfs.fat -F32 /dev/sdX1
    mkswap /dev/sdX2
    mkfs.ext4 /dev/sdX3
    mkfs.ext4 /dev/sdX4
    
check partitions
    fdisk -l
    lsblk -f
    
MOUNT THE FILE SYSTEMS
mount the root first, and create and mount the other directories
    mount   /dev/sdX3   /mnt

    mkdir -p /mnt/boot/efi
    mount   /dev/sdX1   /mnt/boot/efi
    
    swapon  /dev/sdX2
    
    mkdir   /mnt/home
    mount   /dev/sdX4   /mnt/home
    
MIRRORLIST
sync database, install reflector, and execute to update the mirrorlist
    pacman -Sy
    pacman -S reflector
    reflector --verbose --country 'United States' --protocol https --sort rate --save /etc/pacman.d/mirrorlist
    
INSTALL THE BASE PACKAGES
base-devel has sudo and other important packes too, so you should get it
hardened is for security, and the headers are necessary for the nvidia drivers later on
    pacstrap /mnt base base-devel
    
FSTAB
generate fstab and check it
    genfstab -U /mnt >> /mnt/etc/fstab
    nano /mnt/etc/fstab

CHROOT
    arch-chroot /mnt
    
TIMEZONE
check zoneinfo, copy, and set the hardware to UTC
    ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
    hwclock --systohc
    
LOCALIZATION
generate locale and check
uncomment en_US.UTF-8 UTF-8
    nano /etc/locale.gen
    locale-gen
    echo LANG=en_US.UTF-8 > /etc/locale.conf
    nano /etc/locale.conf
    
NETWORK CONFIGURATION
edit the hostname and hosts files for network, and check them
    echo arch > /etc/hostname
    nano /etc/hostname
    nano /etc/hosts
        127.0.0.1	localhost
        ::1         localhost
        127.0.1.1	arch.localdomain	arch
        
INITRAMFS
just in case, rebuild initramfs
    mkinitcpio -p linux
    
ROOT PASSWORD
set root password
    passwd
    
PACMAN.CONF
    sudo  /etc/pacman.conf
uncomment these things
        Color
        [multilib]
        Include = /etc/pacman.d/mirrorlist
        
    sudo pacman -Sy
    
BOOT LOADER
get packages, intel-ucode for the processor, install in the removable way, and generate the config to include intel-ucode
ntfs-3g is so you can find windows
    pacman -Syu
    pacman -S efibootmgr grub intel-ucode ntfs-3g os-prober
    grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --removable
    grub-mkconfig -o /boot/grub/grub.cfg
    
USERS AND GROUPS
install zsh, default user use zsh, give sudo perms, and remove needing to do passwords in different terminals, and check
useradd you must capitalize G otherwise you will be specifying guid
    pacman -S zsh
    useradd -m -G wheel -s /usr/bin/zsh volt
    passwd volt
    visudo
uncomment wheel line, :x to save and exit
        %wheel ALL=(ALL) ALL

double check users
    groups volt
    less /etc/passwd
    
CONFIGURE NETWORK DYNAMICALLY
set up basic system services and syncs
    systemctl enable dhcpcd
    timedatectl set-ntp true
    
REBOOT
clean umount and reboot
    exit
    umount -R /mnt
    reboot
    
LOGIN
login as volt

OH-MY-ZSH
do this before literally anything else, skip zsh config, this adds history
    sudo pacman -S git
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

YAY
    git clone https://aur.archlinux.org/yay.git
    cd yay
    makepkg -si
    cd
    rm -rf yay
    
DISPLAY DRIVERS
lib32 stuff is for steam
    sudo pacman -S nvidia nvidia-utils lib32-nvidia-utils nvidia-settings
    sudo reboot
    
check that the driver is nvidia and not nouveau
    lspci -k | grep -A 2 -E "(VGA|3D)"

XORG AND COMPOSITOR
    sudo pacman -S xorg-server xorg-xinit compton
    
rootless xorg hardening
can only use startx after this
    sudo echo needs_root_rights = no > /etc/X11/Xwrapper.config
    nano /etc/X11/Xwrapper.config
   
WM SETUP
    sudo pacman -S termite dmenu bspwm sxhkd
    mkdir -p ~/.config/bspwm
    mkdir ~/.config/sxhkd
    cp /usr/share/doc/bspwm/examples/bspwmrc ~/.config/bspwm
    cp /usr/share/doc/bspwm/examples/sxhkdrc ~/.config/sxhkd
    
switch out terminal
    nano ~/.config/sxhkdrc
        # terminal emulator
        super + Return
            termite
            
FONTS
    sudo pacman -S noto-fonts noto-fonts-emoji noto-fonts-cjk
    
XINITRC
    nano ~/.xinitrc
        compton &
        sxhkd &
        exec bspwm
        
ENTER THE SYSTEM
    startx
    
CONFIGURE DISPLAY
use nvidia-settings, change monitor configuration, save configuration as xorg.conf
    sudo mv ~/xorg.conf /etc/X11/xorg.conf.d/xorg.conf
    
    reboot
    
APPARMOR AND FIREJAIL
    pacman -S apparmor firejail
    nano /etc/default/grub
        GRUB_CMDLINE_LINUX="apparmor=1 security=apparmor audit=1"
    systemctl enable apparmor
    systemctl enable auditd
    
    mkdir /etc/pacman.d/hooks/
    nano /etc/pacman.d/hooks/firejail.hook
        [Trigger]
        Type = File
        Operation = Install
        Operation = Upgrade
        Operation = Remove
        Target = usr/bin/*
        Target = usr/local/bin/*
        Target = usr/share/applications/*.desktop

        [Action]
        Description = Configure symlinks in /usr/local/bin based on firecfg.config...
        When = PostTransaction
        Depends = firejail
        Exec = /bin/sh -c 'firecfg &>/dev/null'
        
    grub-mkconfig -o /boot/grub/grub.cfg
    
SELECT THE MIRRORS
    sudo pacman -S reflector
    sudo reflector --verbose --country 'United States' --protocol https --sort rate --save /etc/pacman.d/mirrorlist
    nano /etc/pacman.d/mirrorlist
    
    sudo nano /etc/systemd/system/reflector.service
        [Unit]
        Description=pacman mirrorlist update
        Wants=network-online.target
        After=network-online.target
        
        [Service]
        Type=oneshot
        ExecStart=/usr/bin/reflector --country 'United States' --protocol https --sort rate --save /etc/pacman.d/mirrorlist
        
        [Install]
        RequiredBy=multi-user.target
        
start the service with
    sudo systemctl enable reflector
    
SCRIPTS
    mkdir ~/.scripts
    nano .zshrc
uncomment and change line to
        export PATH=$HOME/.scripts:$PATH
        
    source ~/.zshrc

NM-APPLET
    sudo pacman -S network-manager-applet
    sudo pacman -S trayer
    
    nano ~/.scripts/netman
        #!/bin/sh
        nm-applet    2>&1 > /dev/null &
        trayer  2>&1 > /dev/null
        killall nm-applet
        
    chmod +x ~/.scripts/netman
    
SCREENSHOTS
    sudo pacman -S maim xclip
    nano ~/.scripts/sshot
        #!/bin/sh
        maim -s -u -m 10 | xclip -selection clipboard -t image/png

    chmod +x ~/.scripts/sshot
    
PRIVATE INTERNET ACCESS
    nano /etc/default/grub
        GRUB_CMDLINE_LINUX="ipv6.disable=1"

    sudo grub-mkconfig -o /boot/grub/grub.cfg
    
LASTPASS
    sudo pacman -S lastpass-cli pinentry xclip
    lpass login $EMAILHERE
    
    lpass ls
or
    lpass show -G $SEARCH
    
    lpass show --password --clip $ENTRYNAME
and/or
    lpass show --username --clip $ENTRYNAME
