PRE-INSTALLATION
download arch iso from here, use the magnet link and torrent if you can
    https://www.archlinux.org/download/
    
VERIFY SIGNATURE
verify your file with these commands, replace filename with current arch version
make the checksum files by copy pasting the checksum and then a space and then the filename
everything is in the same folder, and you should cd into it
you can double check the pgp output with the pgp key of the developer at https://www.archlinux.org/people/developers/
    gpg --keyserver-options auto-key-retrieve --verify archlinux-2019.08.01-x86_64.iso.sig
    md5sum -c archlinux-2019.08.01-x86_64.iso.md5
    sha1sum -c archlinux-2019.08.01-x86_64.iso.sha1
    
WRITE INSTALLATION MEDIA
burn usb with etcher, as it seems to handle uefi successfully

BOOT THE LIVE ENVIRONMENT
boot into uefi mode, making sure to select the UEFI mount option in your BIOS
you can read the install guide with
    nano -w install.txt
    
VERIFY THE BOOT MODE
list efi files
    ls /sys/firmware/efi/efivars
    
CONNECT TO THE INTERNET
find the right device, auto setup, and test internet
    ip link
    dhcpcd
    ping www.archlinux.org -c 3
    
UPDATE THE SYSTEM CLOCK
sync to UTC and double check
    timedatectl set-ntp true
    timedatectl status
    
PARTITION THE DISKS
list drives and partitions
    lsblk
    
destroy tables
    gdisk /dev/sdX
    x
    z

partition with cfdisk
    cfdisk /dev/sdX
select gpt table
new partition, 512M size, EFI System
new partition, 20G size, Linux swap
new partition, 30G size, Linux filesystem
new partition, inf size, Linux filesystem

check alignment
    parted -a optimal /dev/sdX
    align-check opt 1
    align-check opt 2
    align-check opt 3
    align-check opt 4

FORMAT THE PARTITIONS
check disks and format partitions
    lsblk
    mkfs.fat -F32 /dev/sdX1
    mkswap /dev/sdX2
    mkfs.ext4 /dev/sdX3
    mkfs.ext4 /dev/sdX4
    
check partitions
    fdisk -l
    lsblk -f
    
MOUNT THE FILE SYSTEMS
mount the root first, and create and mount the other directories
    mount   /dev/sdX3   /mnt

    mkdir -p /mnt/boot/efi
    mount   /dev/sdX1   /mnt/boot/efi
    
    swapon  /dev/sdX2
    
    mkdir   /mnt/home
    mount   /dev/sdX4   /mnt/home
    
MIRRORLIST
sync database, install reflector, and execute to update the mirrorlist
    pacman -Sy
    pacman -S reflector
    reflector --verbose --country 'United States' --protocol https --sort rate --save /etc/pacman.d/mirrorlist
    
INSTALL THE BASE PACKAGES
base-devel has sudo and other important packes too, so you should get it
    pacstrap /mnt base base-devel
    
FSTAB
generate fstab and check it
    genfstab -U /mnt >> /mnt/etc/fstab
    nano -w /mnt/etc/fstab

CHROOT
    arch-chroot /mnt
    
TIMEZONE
check zoneinfo, copy, and set the hardware to UTC
    ls usr/share/zoneinfo
    ls usr/share/zoneinfo/America
    ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
    hwclock --systohc
    
LOCALIZATION
generate locale and check
uncomment en_US.UTF-8 UTF-8
    nano -w /etc/locale.gen
    locale-gen
    echo LANG=en_US.UTF-8 > /etc/locale.conf
    nano -w /etc/locale.conf
    
NETWORK CONFIGURATION
edit the hostname and hosts files for network, and check them
    echo arch > /etc/hostname
    nano -w /etc/hostname
    nano -w /etc/hosts
        127.0.0.1	localhost
        ::1         localhost
        127.0.1.1	arch.localdomain	arch
        
INITRAMFS
just in case, rebuild initramfs
    mkinitcpio -p linux
    
ROOT PASSWORD
set root password
    passwd
    
BOOT LOADER
get packages, intel-ucode for the processor, install in the removable way, and generate the config to include intel-ucode
ntfs-3g is so you can find windows
    pacman -S efibootmgr grub intel-ucode ntfs-3g os-prober
    grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --removable
    grub-mkconfig -o /boot/grub/grub.cfg
    
USERS AND GROUPS
install zsh, default user use zsh, give sudo perms, and remove needing to do passwords in different terminals, and check
useradd you must capitalize G otherwise you will be specifying guid
    pacman -S zsh
    useradd -m -G wheel -s /usr/bin/zsh volt
    passwd volt
    nano -w /etc/sudoers
uncomment wheel line
        %wheel ALL=(ALL) ALL

double check users
    groups volt
    less /etc/passwd
    
CONFIGURE NETWORK DYNAMICALLY
set up basic system services and syncs
    systemctl enable dhcpcd
    timedatectl set-ntp true
    
REBOOT
clean umount and reboot
    exit
    umount -R /mnt
    reboot
    
LOGIN
login as volt

OH-MY-ZSH
do this before literally anything else, skip zsh config, this adds history
    sudo pacman -S git
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

PACMAN.CONF
    sudo nano -w /etc/pacman.conf
uncomment these things
        Color
        [multilib]
        Include = /etc/pacman.d/mirrorlist
