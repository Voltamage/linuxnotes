PRE-INSTALLATION
download arch iso from here, use the magnet link and torrent if you can
    https://www.archlinux.org/download/
    
VERIFY SIGNATURE
verify your file with these commands, replace filename with current arch version
make the checksum files by copy pasting the checksum and then a space and then the filename
you can double check the pgp output with the pgp key of the developer at https://www.archlinux.org/people/developers/
    gpg --keyserver-options auto-key-retrieve --verify archlinux-2019.08.01-x86_64.iso.sig
    md5sum -c archlinux-2019.08.01-x86_64.iso.md5
    sha1sum -c archlinux-2019.08.01-x86_64.iso.sha1
    
WRITE INSTALLATION MEDIA
burn usb with etcher, as it seems to handle uefi successfully

BOOT THE LIVE ENVIRONMENT
boot into uefi mode, making sure to select the UEFI mount option in your BIOS

you can read the install guide with
    nano -w install.txt
    
VERIFY THE BOOT MODE
    ls /sys/firmware/efi/efivars
    
CONNECT TO THE INTERNET
    ip link
    dhcpcd
    
test internet connection
    ping www.archlinux.org -c 3
    
UPDATE THE SYSTEM CLOCK
    timedatectl set-ntp true
    
check time
    timedatectl status
    
PARTITION THE DISKS
list drives and partitions
    lsblk
    
destroy tables
    gdisk
    x
    z

partition with cfdisk
    cfdisk /dev/sda
select gpt table
new partition, 512M size, EFI System
new partition, 16G size, Linux swap
new partition, 32G size, Linux filesystem
new partition, ooG size, Linux filesystem

check alignment
    parted -a optimal /dev/sda
    align-check opt 1
    align-check opt 2
    align-check opt 3
    align-check opt 4

FORMAT THE PARTITIONS
    lsblk
    mkfs.fat -F32 /dev/sda1
    mkswap /dev/sda2
    mkfs.ext4 /dev/sda3
    mkfs.ext4 /dev/sda4
    
check partitions
    fdisk -l
    lsblk -f
    
MOUNT THE FILE SYSTEMS
    swapon  /dev/sda2
    mount   /dev/sda3   /mnt
    mkdir   /mnt/boot
    mkdir   /mnt/home
    mount   /dev/sda1   /mnt/boot
    mount   /dev/sda4   /mnt/home
    
INSTALL THE BASE PACKAGES
    pacstrap /mnt base base-devel
    
FSTAB
generate fstab and check it
    genfstab -U /mnt >> /mnt/etc/fstab
    nano -w /mnt/etc/fstab

CHROOT
    arch-chroot /mnt
    
TIMEZONE
    ls usr/share/zoneinfo
    ls usr/share/zoneinfo/America
    ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
    hwclock --systohc
    
LOCALIZATION
uncomment en_US.UTF-8 UTF-8
    nano -w /etc/locale.gen
    locale-gen
    echo LANG=en_US.UTF-8 > /etc/locale.conf
    nano -w /etc/locale.conf
    
NETWORK CONFIGURATION
    echo arch > /etc/hostname
    nano -w /etc/hosts
        127.0.0.1	localhost
        ::1         localhost
        127.0.1.1	arch.localdomain	arch
        
INITRAMFS
just in case
    mkinitcpio -p linux
    
ROOT PASSWORD
    passwd
    
SELECT THE MIRRORS
    pacman -S reflector
    cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
    reflector --latest 32 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
    nano -w /etc/pacman.d/mirrorlist
    nano -w /etc/systemd/system/reflector.service
        [Unit]
        Description=pacman mirrorlist update
        Wants=network-online.target
        After=network-online.target
        
        [Service]
        Type=oneshot
        ExecStart=/usr/bin/reflector --latest 32 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
        
        [Install]
        RequiredBy=multi-user.target
        
BOOT LOADER
    pacman -S efibootmgr grub intel-ucode os-prober
    mkdir /boot/efi
    grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --removable
    grub-mkconfig -o /boot/grub/grub.cfg
    
USERS AND GROUPS
    pacman -S zsh
    useradd -m -G wheel -s /usr/bin/zsh volt
    passwd volt
    nano -w /etc/sudoers
uncomment %wheel ALL=(ALL) ALL
add this to the file as well
        ## Keeps wheel users from needing to reinsert passwords in different terminals
        Defaults !tty_tickets
groups volt
less /etc/passwd
        
CONFIGURE NETWORK DYNAMICALLY
    systemctl enable dhcpcd
    timedatectl set-ntp true
    
REBOOT
    exit
    umount -R /mnt
    reboot

NETBOOT?
LVM?
NETWORK MANAGER REPLACE DHCPCD?
boot partition 550 MiB for safety?
auto num lock
auto sign in user
firejail
compton
display orientation
nvidia
kernels
yay and aur repos, color on yay
pulseaudio and/or alternatives
grub optional dependencies
orphan files
customize grub
oh-my-zsh
auto detect drives and automount externals
list of installed programs from manjaro
firefox configs
